package controllers

import (
	"bytes"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"os"
	"strings"
	"time"

	"github.com/gin-gonic/gin"
)

type SearchInput struct {
	FlyInDay          time.Time `json:"fly_in_day" binding:"required"`
	ReturnFlightDay   time.Time `json:"return_flight_day"`
	FlightDestination string    `json:"flight_destination" binding:"required"`
	FlightOrigin      string    `json:"flight_origin" binding:"required"`
}

type SearchResult struct {
	OriginAirportCode      string `json:"origin_airport_code"`
	OriginAirportCity      string `json:"origin_airport_city"`
	FlightNumber           string `json:"flight_number"`
	DestinationAirportCode string `json:"destination_airport_code"`
	DestinationAirportCity string `json:"destination_airport_city"`
	FlightDuration         string `json:"flight_duration"`
	Reliability            string `json:"reliability"`
}

func Search(c *gin.Context) {
	fmt.Println("Searching flights...")

	// var input SearchInput
	// if err := c.ShouldBindJSON(&input); err != nil {
	// 	c.JSON(http.StatusBadRequest, gin.H{"err": err.Error()})
	// 	return
	// }

	flights, err := DuffelQuery()
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"err": err.Error()})
	}
	fmt.Println(flights)
	flights_json, err := json.Marshal(flights)
	c.JSON(http.StatusAccepted, flights_json)
	//c.JSON(http.StatusAccepted, gin.H{"yes": "yes"})

}

// Generated by curl-to-Go: https://mholt.github.io/curl-to-go

//curl -X POST --compressed "https://api.duffel.com/air/offer_requests?return_offers=false"
//  -H "Accept-Encoding: gzip"
//  -H "Accept: application/json"
//  -H "Content-Type: application/json"
//  -H "Duffel-Version: v1"
//  -H "Authorization: Bearer duffel_test_D_iatNCJUYaoBy6Q3n5JR4LVHkGIDVyT9wJcTrhPvyt"
//  -d '{
//  "data": {
//    "slices" : [
//      {
//        "origin": "NYC",
//        "destination": "ATL",
//        "departure_date": "2021-06-21"
//      },
//      {
//        "origin": "ATL",
//        "destination": "NYC",
//        "departure_date": "2021-07-21"
//      }
//    ],
//    "passengers": [{ "type": "adult" }, { "type": "adult" }, { "age": 1 }],
//    "cabin_class": "business"
//  }
//}

type Payload struct {
	Data Data `json:"data"`
}
type Slices struct {
	Origin        string `json:"origin"`
	Destination   string `json:"destination"`
	DepartureDate string `json:"departure_date"`
}
type Passengers struct {
	Type string `json:"type,omitempty"`
	Age  int    `json:"age,omitempty"`
}
type Data struct {
	Slices     []Slices     `json:"slices"`
	Passengers []Passengers `json:"passengers"`
	CabinClass string       `json:"cabin_class"`
}
type DuffelResponse struct {
	Data struct {
		Slices []struct {
			OriginType string `json:"origin_type"`
			Origin     struct {
				Type            string  `json:"type"`
				TimeZone        string  `json:"time_zone"`
				Name            string  `json:"name"`
				Longitude       float64 `json:"longitude"`
				Latitude        float64 `json:"latitude"`
				ID              string  `json:"id"`
				IcaoCode        string  `json:"icao_code"`
				IataCountryCode string  `json:"iata_country_code"`
				IataCode        string  `json:"iata_code"`
				IataCityCode    string  `json:"iata_city_code"`
				CityName        string  `json:"city_name"`
				City            struct {
					Type            string      `json:"type"`
					TimeZone        interface{} `json:"time_zone"`
					Name            string      `json:"name"`
					Longitude       interface{} `json:"longitude"`
					Latitude        interface{} `json:"latitude"`
					ID              string      `json:"id"`
					IcaoCode        interface{} `json:"icao_code"`
					IataCountryCode string      `json:"iata_country_code"`
					IataCode        string      `json:"iata_code"`
					IataCityCode    string      `json:"iata_city_code"`
					CityName        interface{} `json:"city_name"`
				} `json:"city"`
				Airports interface{} `json:"airports"`
			} `json:"origin"`
			DestinationType string `json:"destination_type"`
			Destination     struct {
				Type            string  `json:"type"`
				TimeZone        string  `json:"time_zone"`
				Name            string  `json:"name"`
				Longitude       float64 `json:"longitude"`
				Latitude        float64 `json:"latitude"`
				ID              string  `json:"id"`
				IcaoCode        string  `json:"icao_code"`
				IataCountryCode string  `json:"iata_country_code"`
				IataCode        string  `json:"iata_code"`
				IataCityCode    string  `json:"iata_city_code"`
				CityName        string  `json:"city_name"`
				City            struct {
					Type            string      `json:"type"`
					TimeZone        interface{} `json:"time_zone"`
					Name            string      `json:"name"`
					Longitude       interface{} `json:"longitude"`
					Latitude        interface{} `json:"latitude"`
					ID              string      `json:"id"`
					IcaoCode        interface{} `json:"icao_code"`
					IataCountryCode string      `json:"iata_country_code"`
					IataCode        string      `json:"iata_code"`
					IataCityCode    string      `json:"iata_city_code"`
					CityName        interface{} `json:"city_name"`
				} `json:"city"`
				Airports interface{} `json:"airports"`
			} `json:"destination"`
			DepartureDate string    `json:"departure_date"`
			CreatedAt     time.Time `json:"created_at"`
		} `json:"slices"`
		Passengers []struct {
			Type                     string `json:"type"`
			LoyaltyProgrammeAccounts []struct {
				AirlineIataCode string `json:"airline_iata_code"`
				AccountNumber   string `json:"account_number"`
			} `json:"loyalty_programme_accounts"`
			ID         string      `json:"id"`
			GivenName  string      `json:"given_name"`
			FareType   interface{} `json:"fare_type"`
			FamilyName string      `json:"family_name"`
			Age        interface{} `json:"age"`
		} `json:"passengers"`
		LiveMode   bool      `json:"live_mode"`
		ID         string    `json:"id"`
		CreatedAt  time.Time `json:"created_at"`
		CabinClass string    `json:"cabin_class"`
	} `json:"data"`
}

func DuffelQuery() (*DuffelResponse, error) {
	data := Payload{
		Data: Data{
			Slices: []Slices{
				{
					Origin:        "DFW",
					Destination:   "LAX",
					DepartureDate: "2023-06-21",
				},
			},
			Passengers: []Passengers{
				{
					Type: "adult",
				},
			},
		},
	}
	payloadBytes, err := json.Marshal(data)
	if err != nil {
		return nil, err
	}
	body := bytes.NewReader(payloadBytes)

	req, err := http.NewRequest("POST", "https://api.duffel.com/air/offer_requests?return_offers=false", body)
	if err != nil {
		return nil, err
	}
	req.Header.Set("Accept-Encoding", "gzip")
	req.Header.Set("Accept", "application/json")
	req.Header.Set("Content-Type", "application/json")
	req.Header.Set("Duffel-Version", "v1")
	req.Header.Set("Authorization", os.ExpandEnv("Bearer $DUFFEL_API_TOKEN"))

	resp, err := http.DefaultClient.Do(req)
	fmt.Println(resp.Status)
	if err != nil {
		fmt.Println("err creating http req")
		return nil, err
	}
	defer resp.Body.Close()

	var duffelResp DuffelResponse
	buf := new(strings.Builder)
	_, err = io.Copy(buf, resp.Body)
	fmt.Println(buf.String())
	//err = json.NewDecoder(resp.Body).Decode(duffelResp)
	respBytes, err := io.ReadAll(resp.Body)
	fmt.Println(string(respBytes))
	json.Unmarshal([]byte(respBytes), &duffelResp)
	fmt.Println(duffelResp)
	if err != nil {
		fmt.Println("err decoding response body")
		return nil, err
	}

	return &duffelResp, nil
}
